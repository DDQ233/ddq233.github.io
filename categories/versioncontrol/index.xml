<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VersionControl on DDQ的笔记</title>
    <link>https://ddq233.github.io/categories/versioncontrol/</link>
    <description>Recent content in VersionControl on DDQ的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2020 DDQ.</copyright>
    <lastBuildDate>Tue, 07 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ddq233.github.io/categories/versioncontrol/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git学习笔记</title>
      <link>https://ddq233.github.io/notes/git_notes/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.github.io/notes/git_notes/</guid>
      <description>一、Git 的优势  大部分操作在本地完成，不需要联网 完整性保证 尽可能添加数据而不是删除或修改数据 分支操作非常快捷流畅 与 Linux 命令全面兼容   二、Git 的结构  工作区（写代码） 暂存区（临时存储） 本地库（历史版本）   三、Git 和代码托管中心 代码托管中心的任务：维护远程库
3.1 局域网环境下  GitLab 服务器  3.2 外网环境下  GitHub 码云   四、本地库和远程库  团队内部协作 跨团队协作  4.1 本地库初始化  $ git init
 注意：.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改。
4.2 设置签名  形式  用户名：XXX Email 地址：XXX@XXX.com   作用：区分不同开发人员的身份 辨析：签名和登录远程库（代码托管中心）的账号、密码没有任何关系 命令  项目级别 / 仓库级别  作用范围：仅在当前本地库范围内有效 命令：git config user.</description>
    </item>
    
  </channel>
</rss>