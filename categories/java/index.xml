<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on DDQ的笔记</title>
    <link>https://ddq233.gitee.io/categories/java/</link>
    <description>Recent content in Java on DDQ的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2019 - 2020 DDQ.</copyright>
    <lastBuildDate>Sun, 03 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ddq233.gitee.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring数据库编程笔记</title>
      <link>https://ddq233.gitee.io/notes/spring_database_dev/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.gitee.io/notes/spring_database_dev/</guid>
      <description>1. 什么是数据库连接池？ 数据库连接池（Connection pooling）是程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由程序动态地对池中对连接进行申请，使用，释放。
连接数据库是一个耗时的操作，一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭，这样会造成系统性能低。
因此，在程序初始化对时候，集中创建多个数据库连接，并把它们进行集中管理，这样可以提高系统性能。
2. 传统的JDBC连接与数据库连接池连接的区别是什么？ 2.1 JDBC访问数据库对过程  装载数据库驱动程序 通过JDBC建立数据库连接 访问数据库，执行SQL语句 组装结果 关闭数据库资源  2.2 数据库连接池访问数据库  程序初始化时创建连接池 使用时向连接池申请可用连接 使用完毕，将连接返还给连接池 程序退出时，断开所有连接并释放资源  3. 为什么要使用数据库连接池？ 数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现的尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。
数据库连接池正式针对这个问题提出来的。
数据库连接池负责分配，管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。
在应用程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由应用程序动态地对池中对连接进行申请、使用和释放。应用程序可以根据池中对使用率，动态地增加或者减少池中对连接数，提高了服务器的运行效率。
举个简单例子：
有一个大仓库（数据库），负责存放大量商家的物品。
大仓库有一个专业的管理团队（数据库连接池），负责对物品进行管理。
商家（用户）对他们自己商品进行提取或存放，作为一次业务请求。
商家每提交一次业务请求，就需要与一位管理员对接，业务请求完毕后，管理员等待下一次的业务请求。
在一个大仓库中，有不同的商家的商品在大仓库中存储物品，管理团队负责管理仓库。商家只需要把经历放在自己的生意上，而提货存货这类操作交给仓库的管理团队即可，免去了亲自去把商品存储到仓库或者从仓库提取货物出来这些繁琐的事情，提高了效率。
 4. 数据库连接池的优势是什么？ 1. 减少连接创建时间。 连接池中的连接是已准备好的、可重复使用的，获取后可以直接访问数据库，因此减少了连接创建的次数和时间。
2. 简化的编程模式。 当使用连接池时，每一个单独的线程能够像创建一个自己的JDBC连接一样操作，允许用户直接使用JDBC编程技术。
3. 控制资源的使用。 如果不使用连接池，每次访问数据库都需要创建一个连接，这样系统的稳定性受系统连接需求影响很大，很容易产生资源浪费和高负载异常。连接池能够使性能最大化，将资源利用控制在一定的水平之下。连接池能控制池中的连接数量，增强了系统在大量用户应用时的稳定性。
 5. 常见的数据库连接池 5.1 DBCP DBCP类是一个依赖 Jakarta commons-pool 对象池机制的数据库连接池，所以，在类路径下必须导入依赖jar包。
5.2 C3P0 C3P0：是一个开放源代码的JDBC连接池，它在lib目录中与Hibernate一起发布，包括了实现jdbc3和jdbc2扩展规范说明的Connection和Statement池的DataSources对象。
5.3 Druid Druid是阿里巴巴开发的号称为监控而生的数据库连接池，目前最好的数据库连接池。
结合了C3P0、DBCP、PROXOOL等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况。
5.4 Proxool Proxool：是一个Java SQL Driver驱动程序，提供了对选择的其它类型的驱动程序的连接池封装。可以非常简单的移植到现存的代码中，完全可配置，快速、成熟、健壮。可以透明地为现存的JDBC驱动程序增加连接池功能。</description>
    </item>
    
  </channel>
</rss>