<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on DDQ的笔记</title>
    <link>https://ddq233.github.io/tags/maven/</link>
    <description>Recent content in Maven on DDQ的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2020 DDQ.</copyright>
    <lastBuildDate>Thu, 30 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ddq233.github.io/tags/maven/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java开发可能用到对Maven依赖</title>
      <link>https://ddq233.github.io/notes/java_dev_maven_dependencies/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.github.io/notes/java_dev_maven_dependencies/</guid>
      <description>Java开发可能用到对Maven依赖
1. 其他依赖 1.1 单元测试 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  1.2 日志 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.17&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.9.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;log4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.9.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  1.3 代理 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cglib&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cglib&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  1.4 Json &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jackson-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.11.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jackson-annotations&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.11.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jackson-databind&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.11.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  1.5 数据库连接 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.1.8&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  1.6 整合包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Maven习笔记</title>
      <link>https://ddq233.github.io/notes/maven_notes/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.github.io/notes/maven_notes/</guid>
      <description>前言： 生产环境下开发不再是一个项目一个工程，而是每一个模块创建一个工程，而多个模块整合在一起就需要使用到像 Maven 这样的构建工具
1. 为什么要使用 Maven ？ 为什么要使用 Maven ？它能帮助我们解决什么问题？
(1) 轻松添加第三方 jar 包
 在开发过程中，同样的 jar 包会出现在不同的工程项目中，开发人员需要不停地做 jar 包的复制粘贴工作。这些操作会导致工作区中存在大量重复的文件，让工程显得很臃肿。
 使用 Maven 后，只需要把 jar 包保存在【仓库】中，需要用到 jar 包的工程只需要以坐标的方式简单引用一下即可。
 使用 Maven 的好处就是极大的节约了存储空间，让项目更轻巧，避免了重复文件太多而造成的混乱。
(2) 解决 jar 包之间的依赖关系的问题
 jar 包往往不是孤立存在的，有时候一个 jar 包的正常工作需要依赖另一个或多个 jar 包。而作为开发人员，不可能知道所有 jar 包之间的依赖关系并正确导入工程项目中，极大地浪费了我们导入包的时间成本，也极大地增加了学习成本。
 引入 Maven 后，Maven 就可以替我们自动的将当前 jar 包所依赖的其他所有 jar 包全部导入进来，无需人工参与，节约了我们大量的时间和精力。
(3) 获取第三方 jar 包
 在开发过程中使用到的 jar 包种类繁多，不可能把精力都花在到互联网寻找 jar 包上面，费时费力。
 因此，借助 Maven 可以帮助我们解决问题。我们只需要在项目中以坐标的方式依赖一个 jar 包，Maven 就会自动从中央仓库进行下载 jar 包和这个 jar 包所依赖的其他 jar 包。</description>
    </item>
    
    <item>
      <title>IDEAJ下配置Maven</title>
      <link>https://ddq233.github.io/notes/maven_in_ideaj/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.github.io/notes/maven_in_ideaj/</guid>
      <description>打开设置
Settings &amp;gt; Build, Execution, Deployment &amp;gt; Build Tools &amp;gt; Maven
修改 Maven 路径和本地仓库的路径
修改 Maven 目录：
修改 Maven 配置文件路径
修改 Maven 本地仓库路径
 Settings &amp;gt; Build, Execution, Deployment &amp;gt; Build Tools &amp;gt; Maven &amp;gt; Importing
Maven 自动导包设置
可能出现的问题：
 设置了自定义的 Maven，但每次启动创建工程 IDEAJ 都会改回它内置的 Maven 通过 【Setting For New Project】 方法设置 Maven 也出现同样的问题  解决办法：
出现的问题可能是因为 IDEAJ 版本（version：2019-2）本身存在的 bug，更换版本就能够解决。
如果不想更换版本，那么可以用自定义的配置文件覆盖默认的配置文件，同时在自定义的配置文件中更改仓库路径。但这样只能够使用 IDEAJ 内置的 Maven。</description>
    </item>
    
    <item>
      <title>Maven仓库地址</title>
      <link>https://ddq233.github.io/notes/maven_repository_url/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.github.io/notes/maven_repository_url/</guid>
      <description>XML配置
&amp;lt;!-- 阿里云仓库 --&amp;gt;&amp;lt;mirror&amp;gt;&amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt;&amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;&amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/repositories/central/&amp;lt;/url&amp;gt;&amp;lt;/mirror&amp;gt;&amp;lt;!-- 中央仓库1 --&amp;gt;&amp;lt;mirror&amp;gt;&amp;lt;id&amp;gt;repo1&amp;lt;/id&amp;gt;&amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;&amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://repo1.maven.org/maven2/&amp;lt;/url&amp;gt;&amp;lt;/mirror&amp;gt;&amp;lt;!-- 中央仓库2 --&amp;gt;&amp;lt;mirror&amp;gt;&amp;lt;id&amp;gt;repo2&amp;lt;/id&amp;gt;&amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;&amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://repo2.maven.org/maven2/&amp;lt;/url&amp;gt;&amp;lt;/mirror&amp;gt;&amp;lt;mirror&amp;gt;&amp;lt;id&amp;gt;ibiblio&amp;lt;/id&amp;gt;&amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;&amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://mirrors.ibiblio.org/pub/mirrors/maven2/&amp;lt;/url&amp;gt;&amp;lt;/mirror&amp;gt;&amp;lt;mirror&amp;gt;&amp;lt;id&amp;gt;jboss-public-repository-group&amp;lt;/id&amp;gt;&amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;&amp;lt;name&amp;gt;JBoss Public Repository Group&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://repository.jboss.org/nexus/content/groups/public&amp;lt;/url&amp;gt;&amp;lt;/mirror&amp;gt;&amp;lt;!-- 中央仓库在中国的镜像 --&amp;gt;&amp;lt;mirror&amp;gt;&amp;lt;id&amp;gt;maven.net.cn&amp;lt;/id&amp;gt;&amp;lt;name&amp;gt;oneof the central mirrors in china&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://maven.</description>
    </item>
    
    <item>
      <title>在Windows下配置Maven</title>
      <link>https://ddq233.github.io/notes/maven_in_win/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.github.io/notes/maven_in_win/</guid>
      <description>1. Maven 下载 官网下载地址：http://maven.apache.org/download.cgi
注意：
 Maven 3.3+ 版本的需要 JDK 1.7 或以上 Maven 必须安装在非中文目录下  按需选择下载即可
（示例）安装目录：C:\DevTools\apache-maven-3.6.1
2. 配置 Maven 环境变量 步骤如下：
1) 进入系统设置2) 高级系统设置 &amp;gt; 系统属性 &amp;gt; 高级 &amp;gt; 环境变量3) 新建系统变量：M2_HOME4) 在系统变量中找到Path，在其中添加：&amp;amp;M2_HOME&amp;amp;\bin 新建系统变量： 编辑 Path 环境变量： 3. 查看 Maven 是否安装成功 1) 打开 cmd 命令提示符2) 输入命令：mvn -v 4. Maven 配置文件 Maven 配置文件的路径：C:\DevTools\apache-maven-3.6.1\conf\settings.xml
5. 修改本地仓库位置 在&amp;lt;localRepository&amp;gt;标签内添加自己的本地位置路径
（示例）本地仓库地址：C:\DevTools\mavenLocalRepository
&amp;lt;!-- localRepository| The path to the local repository maven will use to store artifacts.</description>
    </item>
    
  </channel>
</rss>