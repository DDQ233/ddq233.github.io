<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on DDQ的笔记</title>
    <link>https://ddq233.gitee.io/tags/git/</link>
    <description>Recent content in Git on DDQ的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2019 - 2020 DDQ.</copyright>
    <lastBuildDate>Sat, 09 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ddq233.gitee.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git强制同步远程仓库到本地</title>
      <link>https://ddq233.gitee.io/notes/git_force_sync_remote_to_local/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.gitee.io/notes/git_force_sync_remote_to_local/</guid>
      <description>命令：
$ git fetch --all $ git reset --hard origin/master  </description>
    </item>
    
    <item>
      <title>Git使用总结(2)</title>
      <link>https://ddq233.gitee.io/notes/git_use_cmd_2/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.gitee.io/notes/git_use_cmd_2/</guid>
      <description>3. commit 到了错误分支
撤回上一次 commit 但保留改动
$ git reset HARD~ --soft $ git stash  将改动提交到正确的分支
$ git checkout CORRECT_BRANCH $ git stash pop $ git add FILE $ git commit -m &amp;quot;COMMIT_MESSAGE&amp;quot;  4. commit 完了才发现还有一小处要修改
先做好修改
$ git add . # or add 相关文件 $ git commit --amend  然后选择要不要保留或者更改 commit message 现在的 commit 已经包含了最新作出的修改
5. 修改上一个 commit message
$ git commit --amend  然后可以更改 commit message
6. 把本应在新分支上的内容 commit 到了 master</description>
    </item>
    
    <item>
      <title>Git使用总结(3)</title>
      <link>https://ddq233.gitee.io/notes/git_use_cmd_3/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.gitee.io/notes/git_use_cmd_3/</guid>
      <description>7. Git 远程分支与本地分支合并
查看远程仓库：
$ git remote -v  方法一：拉取远程仓库到本地直接合并
从远程的 origin 仓库的 master 分支下载代码到本地的 origin master
$ git fetch origin master  比较本地的仓库和远程参考的区别
$ git log -p master.. origin/master  把远程下载下来的代码合并到本地仓库，远程的和本地的合并
$ git merge origin/master  方法二：拉取远程仓库到本地新分支再进行合并（更安全）
从远程的 origin 仓库的 master 分支下载到本地并新建一个分支 temp
$ git fetch origin master:temp  比较master分支和temp分支的不同
$ git diff temp  合并 temp 分支到 master 分支
$ git merge temp  如果不想要 temp 分支可以删除
$ git branch -d temp  </description>
    </item>
    
    <item>
      <title>Git常用命令速查手册</title>
      <link>https://ddq233.gitee.io/notes/git_cmd_man/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.gitee.io/notes/git_cmd_man/</guid>
      <description>1. 初始化 # 在当前目录新建一个Git代码库 $ git init # 下载一个项目和它的整个代码历史 $ git clone [url] # 从远程仓库克隆项目到本地 $ git clone git@github.com:git[帐号名/仓库名].git  2. 配置 # 列举所有配置 $ git config -l # 为命令配置别名 $ git config --global alias.co checkout $ git config --global alias.ci commit $ git config --global alias.st status $ git config --global alias.br branch # 设置提交代码时的用户信息 $ git config [--global] user.name [name] $ git config [--global] user.email [email address]  3.</description>
    </item>
    
    <item>
      <title>Git使用总结(1)</title>
      <link>https://ddq233.gitee.io/notes/git_use_cmd_1/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.gitee.io/notes/git_use_cmd_1/</guid>
      <description>1. 初始化配置
建仓第一步，先配置使用用户，区分不同的开发人员身份
$ git config user.name XXXXX $ git config user.email XXXXX  2. 添加/删除远程仓库链接
在开发时，使用到远程仓库时，需要对远程仓库链接进行管理
查看远程仓库
$ git remote -v  添加远程仓库地址
$ git remote add origin [项目地址]  删除远程仓库地址
$ git remote rm origin  向远程仓库推送代码
$ git push origin master  </description>
    </item>
    
    <item>
      <title>Git学习笔记</title>
      <link>https://ddq233.gitee.io/notes/git_notes/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ddq233.gitee.io/notes/git_notes/</guid>
      <description>一、Git 的优势  大部分操作在本地完成，不需要联网 完整性保证 尽可能添加数据而不是删除或修改数据 分支操作非常快捷流畅 与 Linux 命令全面兼容   二、Git 的结构  工作区（写代码） 暂存区（临时存储） 本地库（历史版本）   三、Git 和代码托管中心 代码托管中心的任务：维护远程库
3.1 局域网环境下  GitLab 服务器  3.2 外网环境下  GitHub 码云   四、本地库和远程库  团队内部协作 跨团队协作  4.1 本地库初始化  $ git init
 注意：.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改。
4.2 设置签名  形式  用户名：XXX Email 地址：XXX@XXX.com   作用：区分不同开发人员的身份 辨析：签名和登录远程库（代码托管中心）的账号、密码没有任何关系 命令  项目级别 / 仓库级别  作用范围：仅在当前本地库范围内有效 命令：git config user.</description>
    </item>
    
  </channel>
</rss>